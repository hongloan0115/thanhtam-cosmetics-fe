"use client"

import type React from "react"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { MessageCircle, X, Send, User, Bot, ArrowRight, CheckCircle2, Clock } from "lucide-react"
import { Input } from "@/components/ui/input"
import { Avatar } from "@/components/ui/avatar"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { formatCurrency } from "@/lib/utils"

// ƒê·ªãnh nghƒ©a c√°c lo·∫°i tin nh·∫Øn
type MessageStatus = "sending" | "sent" | "received" | "read"
type MessageSender = "user" | "bot" | "agent"

interface QuickReply {
  id: string
  text: string
  action: string
}

interface ProductInfo {
  id: number
  name: string
  price: number
  image: string
}

interface Message {
  id: string
  text: string
  sender: MessageSender
  timestamp: Date
  status: MessageStatus
  quickReplies?: QuickReply[]
  product?: ProductInfo
}

export default function ChatbotButton() {
  const [isOpen, setIsOpen] = useState(false)
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<Message[]>([])
  const [isTyping, setIsTyping] = useState(false)
  const [isAgentMode, setIsAgentMode] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // T·∫£i l·ªãch s·ª≠ chat t·ª´ localStorage khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const savedMessages = localStorage.getItem("chatHistory")
    if (savedMessages) {
      try {
        // Chuy·ªÉn ƒë·ªïi chu·ªói timestamp th√†nh ƒë·ªëi t∆∞·ª£ng Date
        const parsedMessages = JSON.parse(savedMessages).map((msg: any) => ({
          ...msg,
          timestamp: new Date(msg.timestamp),
        }))
        setMessages(parsedMessages)
      } catch (error) {
        console.error("L·ªói khi ph√¢n t√≠ch l·ªãch s·ª≠ chat:", error)
      }
    } else {
      // Tin nh·∫Øn ch√†o m·ª´ng m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥ l·ªãch s·ª≠
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        text: "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ki·ªÉm tra ƒë∆°n h√†ng ho·∫∑c t∆∞ v·∫•n ∆∞u ƒë√£i h√¥m nay. B·∫°n c·∫ßn g√¨ ·∫°?",
        sender: "bot",
        timestamp: new Date(),
        status: "received",
        quickReplies: [
          { id: "search", text: "üîç T√¨m ki·∫øm s·∫£n ph·∫©m", action: "search" },
          { id: "order", text: "üì¶ Ki·ªÉm tra ƒë∆°n h√†ng", action: "order" },
          { id: "support", text: "üí¨ G·∫∑p nh√¢n vi√™n h·ªó tr·ª£", action: "support" },
        ],
      }
      setMessages([welcomeMessage])
    }
  }, [])

  // L∆∞u tin nh·∫Øn v√†o localStorage khi messages thay ƒë·ªïi
  useEffect(() => {
    if (messages.length > 0) {
      localStorage.setItem("chatHistory", JSON.stringify(messages))
    }
  }, [messages])

  // Cu·ªôn xu·ªëng tin nh·∫Øn m·ªõi nh·∫•t
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  const toggleChat = () => {
    setIsOpen(!isOpen)
  }

  const handleSend = (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim()) return

    // Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
    const userMessage: Message = {
      id: Date.now().toString(),
      text: input,
      sender: "user",
      timestamp: new Date(),
      status: "sending",
    }

    setMessages((prev) => [...prev, userMessage])
    setInput("")

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i tin nh·∫Øn th√†nh "sent" sau 500ms
    setTimeout(() => {
      setMessages((prev) => prev.map((msg) => (msg.id === userMessage.id ? { ...msg, status: "sent" } : msg)))
    }, 500)

    // Hi·ªÉn th·ªã "ƒëang nh·∫≠p" cho bot/agent
    setIsTyping(true)

    // X·ª≠ l√Ω ph·∫£n h·ªìi
    setTimeout(() => {
      setIsTyping(false)

      if (isAgentMode) {
        // Ph·∫£n h·ªìi t·ª´ nh√¢n vi√™n
        const agentResponse: Message = {
          id: Date.now().toString(),
          text: "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. T√¥i l√† H∆∞∆°ng, nh√¢n vi√™n t∆∞ v·∫•n c·ªßa Thanh T√¢m Cosmetics. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n ·∫°?",
          sender: "agent",
          timestamp: new Date(),
          status: "received",
        }
        setMessages((prev) => [...prev, agentResponse])
      } else {
        // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ chatbot d·ª±a tr√™n input
        handleBotResponse(input.toLowerCase())
      }
    }, 1500)
  }

  const handleBotResponse = (userInput: string) => {
    let botResponse: Message

    // X·ª≠ l√Ω c√°c t·ª´ kh√≥a ph·ªï bi·∫øn
    if (userInput.includes("s·∫£n ph·∫©m") || userInput.includes("mua") || userInput.includes("t√¨m")) {
      // Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω
      botResponse = {
        id: Date.now().toString(),
        text: "ƒê√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ph·ªï bi·∫øn c·ªßa ch√∫ng t√¥i:",
        sender: "bot",
        timestamp: new Date(),
        status: "received",
        product: {
          id: 1,
          name: "Kem d∆∞·ª°ng ·∫©m Thanh T√¢m",
          price: 450000,
          image: "/placeholder.svg?height=100&width=100",
        },
        quickReplies: [
          { id: "more", text: "Xem th√™m s·∫£n ph·∫©m", action: "more_products" },
          { id: "details", text: "Chi ti·∫øt s·∫£n ph·∫©m", action: "product_details" },
        ],
      }
    } else if (userInput.includes("ƒë∆°n h√†ng") || userInput.includes("ki·ªÉm tra") || userInput.includes("theo d√µi")) {
      botResponse = {
        id: Date.now().toString(),
        text: "ƒê·ªÉ ki·ªÉm tra ƒë∆°n h√†ng, vui l√≤ng cung c·∫•p m√£ ƒë∆°n h√†ng ho·∫∑c ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n.",
        sender: "bot",
        timestamp: new Date(),
        status: "received",
        quickReplies: [
          { id: "login", text: "ƒêƒÉng nh·∫≠p", action: "login" },
          { id: "order_id", text: "Nh·∫≠p m√£ ƒë∆°n h√†ng", action: "enter_order_id" },
        ],
      }
    } else if (userInput.includes("nh√¢n vi√™n") || userInput.includes("t∆∞ v·∫•n") || userInput.includes("h·ªó tr·ª£")) {
      botResponse = {
        id: Date.now().toString(),
        text: "T√¥i s·∫Ω k·∫øt n·ªëi b·∫°n v·ªõi nh√¢n vi√™n t∆∞ v·∫•n. Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t.",
        sender: "bot",
        timestamp: new Date(),
        status: "received",
      }

      // Chuy·ªÉn sang ch·∫ø ƒë·ªô nh√¢n vi√™n sau 2 gi√¢y
      setTimeout(() => {
        setIsAgentMode(true)
        const agentMessage: Message = {
          id: Date.now().toString(),
          text: "Xin ch√†o! T√¥i l√† H∆∞∆°ng, nh√¢n vi√™n t∆∞ v·∫•n c·ªßa Thanh T√¢m Cosmetics. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n ·∫°?",
          sender: "agent",
          timestamp: new Date(),
          status: "received",
        }
        setMessages((prev) => [...prev, agentMessage])
      }, 2000)
    } else if (userInput.includes("gi√°") || userInput.includes("khuy·∫øn m√£i") || userInput.includes("∆∞u ƒë√£i")) {
      botResponse = {
        id: Date.now().toString(),
        text: "Hi·ªán t·∫°i ch√∫ng t√¥i ƒëang c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i gi·∫£m 20% cho t·∫•t c·∫£ s·∫£n ph·∫©m m·ªõi. B·∫°n c√≥ mu·ªën xem c√°c s·∫£n ph·∫©m ƒëang khuy·∫øn m√£i kh√¥ng?",
        sender: "bot",
        timestamp: new Date(),
        status: "received",
        quickReplies: [
          { id: "promo", text: "Xem s·∫£n ph·∫©m khuy·∫øn m√£i", action: "view_promotions" },
          { id: "no_thanks", text: "Kh√¥ng, c·∫£m ∆°n", action: "no_thanks" },
        ],
      }
    } else {
      // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
      botResponse = {
        id: Date.now().toString(),
        text: "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m v·ªÅ nhu c·∫ßu c·ªßa b·∫°n ƒë·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n?",
        sender: "bot",
        timestamp: new Date(),
        status: "received",
        quickReplies: [
          { id: "search", text: "üîç T√¨m ki·∫øm s·∫£n ph·∫©m", action: "search" },
          { id: "order", text: "üì¶ Ki·ªÉm tra ƒë∆°n h√†ng", action: "order" },
          { id: "support", text: "üí¨ G·∫∑p nh√¢n vi√™n h·ªó tr·ª£", action: "support" },
        ],
      }
    }

    setMessages((prev) => [...prev, botResponse])
  }

  const handleQuickReply = (action: string, text: string) => {
    // Th√™m l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng v√†o chat
    const userMessage: Message = {
      id: Date.now().toString(),
      text: text,
      sender: "user",
      timestamp: new Date(),
      status: "sent",
    }

    setMessages((prev) => [...prev, userMessage])

    // Hi·ªÉn th·ªã "ƒëang nh·∫≠p" cho bot
    setIsTyping(true)

    // X·ª≠ l√Ω h√†nh ƒë·ªông d·ª±a tr√™n n√∫t ƒë∆∞·ª£c nh·∫•n
    setTimeout(() => {
      setIsTyping(false)

      switch (action) {
        case "search":
          handleBotResponse("t√¨m s·∫£n ph·∫©m")
          break
        case "order":
          handleBotResponse("ki·ªÉm tra ƒë∆°n h√†ng")
          break
        case "support":
          handleBotResponse("g·∫∑p nh√¢n vi√™n h·ªó tr·ª£")
          break
        case "more_products":
          const productsResponse: Message = {
            id: Date.now().toString(),
            text: "B·∫°n c√≥ th·ªÉ xem t·∫•t c·∫£ s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i t·∫°i trang s·∫£n ph·∫©m:",
            sender: "bot",
            timestamp: new Date(),
            status: "received",
            quickReplies: [{ id: "go_products", text: "ƒêi ƒë·∫øn trang s·∫£n ph·∫©m", action: "go_to_products" }],
          }
          setMessages((prev) => [...prev, productsResponse])
          break
        case "view_promotions":
          const promoResponse: Message = {
            id: Date.now().toString(),
            text: "ƒê√¢y l√† m·ªôt s·ªë s·∫£n ph·∫©m ƒëang ƒë∆∞·ª£c khuy·∫øn m√£i:",
            sender: "bot",
            timestamp: new Date(),
            status: "received",
            product: {
              id: 3,
              name: "Ph·∫•n n∆∞·ªõc Thanh T√¢m",
              price: 550000,
              image: "/placeholder.svg?height=100&width=100",
            },
          }
          setMessages((prev) => [...prev, promoResponse])
          break
        case "login":
        case "go_to_products":
          // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang t∆∞∆°ng ·ª©ng
          const redirectResponse: Message = {
            id: Date.now().toString(),
            text: `ƒêang chuy·ªÉn h∆∞·ªõng b·∫°n ƒë·∫øn trang ${action === "login" ? "ƒëƒÉng nh·∫≠p" : "s·∫£n ph·∫©m"}...`,
            sender: "bot",
            timestamp: new Date(),
            status: "received",
          }
          setMessages((prev) => [...prev, redirectResponse])
          break
        default:
          handleBotResponse(text)
      }
    }, 1000)
  }

  const resetChat = () => {
    // X√≥a l·ªãch s·ª≠ chat v√† b·∫Øt ƒë·∫ßu l·∫°i
    localStorage.removeItem("chatHistory")
    setIsAgentMode(false)

    const welcomeMessage: Message = {
      id: Date.now().toString(),
      text: "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m, ki·ªÉm tra ƒë∆°n h√†ng ho·∫∑c t∆∞ v·∫•n ∆∞u ƒë√£i h√¥m nay. B·∫°n c·∫ßn g√¨ ·∫°?",
      sender: "bot",
      timestamp: new Date(),
      status: "received",
      quickReplies: [
        { id: "search", text: "üîç T√¨m ki·∫øm s·∫£n ph·∫©m", action: "search" },
        { id: "order", text: "üì¶ Ki·ªÉm tra ƒë∆°n h√†ng", action: "order" },
        { id: "support", text: "üí¨ G·∫∑p nh√¢n vi√™n h·ªó tr·ª£", action: "support" },
      ],
    }

    setMessages([welcomeMessage])
  }

  // Hi·ªÉn th·ªã tr·∫°ng th√°i tin nh·∫Øn
  const renderMessageStatus = (status: MessageStatus) => {
    switch (status) {
      case "sending":
        return <Clock className="h-3 w-3 text-gray-400" />
      case "sent":
        return <CheckCircle2 className="h-3 w-3 text-gray-400" />
      case "received":
        return <CheckCircle2 className="h-3 w-3 text-blue-500" />
      case "read":
        return <CheckCircle2 className="h-3 w-3 text-green-500" />
      default:
        return null
    }
  }

  return (
    <>
      <Button
        onClick={toggleChat}
        className="fixed bottom-6 right-6 rounded-full w-14 h-14 shadow-lg bg-pink-600 hover:bg-pink-700 z-50"
      >
        {isOpen ? <X className="h-6 w-6" /> : <MessageCircle className="h-6 w-6" />}
      </Button>

      {isOpen && (
        <Card className="fixed bottom-24 right-6 w-80 md:w-96 shadow-xl z-50 overflow-hidden flex flex-col h-[500px]">
          <Tabs defaultValue="chat" className="flex flex-col h-full">
            <div className="bg-pink-600 text-white p-4 flex justify-between items-center">
              <div>
                <h3 className="font-medium">Tr·ª£ l√Ω Thanh T√¢m</h3>
                <p className="text-sm opacity-90">
                  {isAgentMode ? "ƒêang n√≥i chuy·ªán v·ªõi nh√¢n vi√™n" : "H·ªó tr·ª£ tr·ª±c tuy·∫øn 24/7"}
                </p>
              </div>
              <TabsList className="bg-pink-700">
                <TabsTrigger value="chat" className="text-white data-[state=active]:bg-pink-800">
                  Chat
                </TabsTrigger>
                <TabsTrigger value="faq" className="text-white data-[state=active]:bg-pink-800">
                  FAQ
                </TabsTrigger>
              </TabsList>
            </div>

            <TabsContent value="chat" className="flex-1 flex flex-col p-0 m-0 overflow-hidden">
              <div className="flex-1 p-4 overflow-y-auto flex flex-col gap-3">
                {messages.map((msg) => (
                  <div key={msg.id} className="flex flex-col">
                    <div
                      className={`flex items-start gap-2 ${msg.sender !== "user" ? "flex-row" : "flex-row-reverse"}`}
                    >
                      {msg.sender === "user" ? (
                        <Avatar className="h-8 w-8 bg-pink-100">
                          <User className="h-4 w-4 text-pink-600" />
                        </Avatar>
                      ) : msg.sender === "agent" ? (
                        <Avatar className="h-8 w-8 bg-blue-100">
                          <User className="h-4 w-4 text-blue-600" />
                        </Avatar>
                      ) : (
                        <Avatar className="h-8 w-8 bg-gray-100">
                          <Bot className="h-4 w-4 text-gray-600" />
                        </Avatar>
                      )}

                      <div
                        className={`max-w-[80%] flex flex-col ${msg.sender === "user" ? "items-end" : "items-start"}`}
                      >
                        <div
                          className={`p-3 rounded-lg ${
                            msg.sender === "user"
                              ? "bg-pink-100 text-gray-800"
                              : msg.sender === "agent"
                                ? "bg-blue-100 text-gray-800"
                                : "bg-gray-100 text-gray-800"
                          }`}
                        >
                          {msg.text}
                        </div>

                        {/* Hi·ªÉn th·ªã s·∫£n ph·∫©m n·∫øu c√≥ */}
                        {msg.product && (
                          <div className="mt-2 bg-white border rounded-lg p-2 w-full">
                            <div className="flex items-center gap-2">
                              <img
                                src={msg.product.image || "/placeholder.svg"}
                                alt={msg.product.name}
                                className="w-12 h-12 object-cover rounded"
                              />
                              <div className="flex-1">
                                <p className="font-medium text-sm">{msg.product.name}</p>
                                <p className="text-pink-600 text-sm font-semibold">
                                  {formatCurrency(msg.product.price)}
                                </p>
                              </div>
                              <Button size="sm" className="bg-pink-600 hover:bg-pink-700">
                                <ArrowRight className="h-4 w-4" />
                              </Button>
                            </div>
                          </div>
                        )}

                        {/* Quick replies */}
                        {msg.quickReplies && msg.quickReplies.length > 0 && (
                          <div className="mt-2 flex flex-wrap gap-2">
                            {msg.quickReplies.map((reply) => (
                              <Button
                                key={reply.id}
                                variant="outline"
                                size="sm"
                                className="text-pink-600 border-pink-200 hover:bg-pink-50"
                                onClick={() => handleQuickReply(reply.action, reply.text)}
                              >
                                {reply.text}
                              </Button>
                            ))}
                          </div>
                        )}

                        <div className="flex items-center mt-1 text-xs text-gray-500">
                          <span>{msg.timestamp.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}</span>
                          {msg.sender === "user" && <span className="ml-1">{renderMessageStatus(msg.status)}</span>}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Hi·ªÉn th·ªã "ƒëang nh·∫≠p" */}
                {isTyping && (
                  <div className="flex items-start gap-2">
                    {isAgentMode ? (
                      <Avatar className="h-8 w-8 bg-blue-100">
                        <User className="h-4 w-4 text-blue-600" />
                      </Avatar>
                    ) : (
                      <Avatar className="h-8 w-8 bg-gray-100">
                        <Bot className="h-4 w-4 text-gray-600" />
                      </Avatar>
                    )}
                    <div className="bg-gray-100 p-3 rounded-lg">
                      <div className="flex gap-1">
                        <span className="animate-bounce">.</span>
                        <span className="animate-bounce" style={{ animationDelay: "0.2s" }}>
                          .
                        </span>
                        <span className="animate-bounce" style={{ animationDelay: "0.4s" }}>
                          .
                        </span>
                      </div>
                    </div>
                  </div>
                )}

                <div ref={messagesEndRef} />
              </div>

              <form onSubmit={handleSend} className="border-t p-3 flex gap-2">
                <Input
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  placeholder="Nh·∫≠p tin nh·∫Øn..."
                  className="flex-1"
                />
                <Button type="submit" className="bg-pink-600 hover:bg-pink-700">
                  <Send className="h-4 w-4" />
                </Button>
              </form>
            </TabsContent>

            <TabsContent value="faq" className="flex-1 p-4 overflow-y-auto m-0">
              <div className="space-y-4">
                <h3 className="font-medium text-lg">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h3>

                <div className="space-y-3">
                  <div className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer">
                    <h4 className="font-medium">L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫∑t h√†ng?</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      B·∫°n c√≥ th·ªÉ ƒë·∫∑t h√†ng tr·ª±c tuy·∫øn th√¥ng qua website ho·∫∑c g·ªçi ƒëi·ªán ƒë·∫øn s·ªë hotline 1900 xxxx.
                    </p>
                  </div>

                  <div className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer">
                    <h4 className="font-medium">Ch√≠nh s√°ch ƒë·ªïi tr·∫£ nh∆∞ th·∫ø n√†o?</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Thanh T√¢m Cosmetics ch·∫•p nh·∫≠n ƒë·ªïi tr·∫£ trong v√≤ng 30 ng√†y k·ªÉ t·ª´ ng√†y mua h√†ng.
                    </p>
                  </div>

                  <div className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer">
                    <h4 className="font-medium">Ph√≠ v·∫≠n chuy·ªÉn l√† bao nhi√™u?</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng t·ª´ 500.000ƒë. ƒê∆°n h√†ng d∆∞·ªõi 500.000ƒë, ph√≠ v·∫≠n chuy·ªÉn l√† 30.000ƒë.
                    </p>
                  </div>

                  <div className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer">
                    <h4 className="font-medium">Th·ªùi gian giao h√†ng?</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      Th·ªùi gian giao h√†ng t·ª´ 2-5 ng√†y l√†m vi·ªác t√πy thu·ªôc v√†o khu v·ª±c.
                    </p>
                  </div>

                  <div className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer">
                    <h4 className="font-medium">L√†m th·∫ø n√†o ƒë·ªÉ theo d√µi ƒë∆°n h√†ng?</h4>
                    <p className="text-sm text-gray-600 mt-1">
                      B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng b·∫±ng c√°ch ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n ho·∫∑c s·ª≠ d·ª•ng m√£ ƒë∆°n h√†ng ƒë∆∞·ª£c g·ª≠i
                      qua email.
                    </p>
                  </div>
                </div>

                <Button
                  variant="outline"
                  className="w-full mt-4 border-pink-600 text-pink-600 hover:bg-pink-50"
                  onClick={() => resetChat()}
                >
                  B·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi
                </Button>
              </div>
            </TabsContent>
          </Tabs>
        </Card>
      )}
    </>
  )
}
